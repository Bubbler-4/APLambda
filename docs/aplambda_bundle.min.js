!function(t,a){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t;const n=a=a&&a.hasOwnProperty("default")?a.default:a,e=t=>a=>({type:t,value:a});var s={Parser:n.createLanguage({main:t=>t.stmt.sepBy(t.stmt_sep),stmt_sep:()=>n.oneOf("\n⋄"),stmt:t=>t.value.sepBy(t._).trim(t._),value:t=>n.alt(t.paren,t.dfn,t.num,t.ident),paren:t=>t.stmt.wrap(n.string("("),n.string(")")).map(e("paren")),dfn:t=>t.main.wrap(n.string("{"),n.string("}")).map(e("dfn")),num:()=>n.regexp(/(?:¯?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)[ \t]*)+/).map(t=>{const a=t.match(/¯?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)/g).map(t=>"¯"===t[0]?-t.slice(1):+t);return e("num")(a)}),ident:()=>n.regexp(/[a-zA-Z_][a-zA-Z0-9_]*/).map(e("ident")),_:()=>n.oneOf(" \t").many()}).main};const l=t("#aplambdaCode"),r=t("#aplambdaInput"),i=t("#aplambdaOutput"),c=t("#aplambdaDebug"),u=t("#aplambdaRun");function p(){const a=t(this),n=a.val().match(/\n/g).length;a.attr("rows",Math.min(n+1,20))}l.on("input",p),r.on("input",p),u.click((function(){const t=l.val();i.val(t);const a=s.Parser.parse(t);a.status?c.val(JSON.stringify(a.value,null,2)):c.val(JSON.stringify(a,null,2)),p.call(i),p.call(c)}));const m={"\\L":"Λ","\\l":"λ","\\a":"α","\\w":"ω","\\-":"¯","\\<>":"⋄"};function o(a){if(9===a.which){const n=t(a.target),e=n.val(),s=a.target.selectionStart,l=e.slice(0,s).lastIndexOf("\\"),r=e.slice(l,s),i=m[r];if(l>=0&&i){n.val(e.slice(0,l)+i+e.slice(s));const t=s-(r.length-i.length);a.target.setSelectionRange(t,t)}else n.val(`${e.slice(0,s)}\t${e.slice(s)}`),a.target.setSelectionRange(s+1,s+1);return!1}return!0}l.keydown(o),r.keydown(o)}($,Parsimmon);